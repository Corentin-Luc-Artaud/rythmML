package RythmML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptANote = createDescriptorForANote();
  /*package*/ final ConceptDescriptor myConceptBar = createDescriptorForBar();
  /*package*/ final ConceptDescriptor myConceptBeat = createDescriptorForBeat();
  /*package*/ final ConceptDescriptor myConceptDrumNote = createDescriptorForDrumNote();
  /*package*/ final ConceptDescriptor myConceptPattern = createDescriptorForPattern();
  /*package*/ final ConceptDescriptor myConceptPosition = createDescriptorForPosition();
  /*package*/ final ConceptDescriptor myConceptSection = createDescriptorForSection();
  /*package*/ final ConceptDescriptor myConceptSilence = createDescriptorForSilence();
  /*package*/ final ConceptDescriptor myConceptSong = createDescriptorForSong();
  /*package*/ final ConceptDescriptor myConceptStandarNote = createDescriptorForStandarNote();
  /*package*/ final ConceptDescriptor myConceptTempo = createDescriptorForTempo();
  /*package*/ final ConceptDescriptor myConceptTrack = createDescriptorForTrack();
  /*package*/ final EnumerationDescriptor myEnumerationDrumEnum = new EnumerationDescriptor_DrumEnum();
  /*package*/ final EnumerationDescriptor myEnumerationNoteFrequencyEnum = new EnumerationDescriptor_NoteFrequencyEnum();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptANote, myConceptBar, myConceptBeat, myConceptDrumNote, myConceptPattern, myConceptPosition, myConceptSection, myConceptSilence, myConceptSong, myConceptStandarNote, myConceptTempo, myConceptTrack);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.ANote:
        return myConceptANote;
      case LanguageConceptSwitch.Bar:
        return myConceptBar;
      case LanguageConceptSwitch.Beat:
        return myConceptBeat;
      case LanguageConceptSwitch.DrumNote:
        return myConceptDrumNote;
      case LanguageConceptSwitch.Pattern:
        return myConceptPattern;
      case LanguageConceptSwitch.Position:
        return myConceptPosition;
      case LanguageConceptSwitch.Section:
        return myConceptSection;
      case LanguageConceptSwitch.Silence:
        return myConceptSilence;
      case LanguageConceptSwitch.Song:
        return myConceptSong;
      case LanguageConceptSwitch.StandarNote:
        return myConceptStandarNote;
      case LanguageConceptSwitch.Tempo:
        return myConceptTempo;
      case LanguageConceptSwitch.Track:
        return myConceptTrack;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationDrumEnum, myEnumerationNoteFrequencyEnum);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForANote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "ANote", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L);
    b.interface_();
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968035");
    b.version(2);
    b.property("frequency", 0x65912afefd8bf49fL).type(MetaIdFactory.dataTypeId(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd8bf493L)).origin("7318678144117634207").done();
    b.aggregate("position", 0x65912afefd827d76L).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca6dL).optional(false).ordered(true).multiple(false).origin("7318678144117013878").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBar() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Bar", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca60L);
    b.class_(false, false, false);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968032");
    b.version(2);
    b.aggregate("notes", 0x65912afefd825135L).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L).optional(false).ordered(true).multiple(true).origin("7318678144117002549").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBeat() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Beat", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca61L);
    b.class_(false, false, false);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968033");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDrumNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "DrumNote", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca67L);
    b.class_(false, false, false);
    b.parent(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968039");
    b.version(2);
    b.property("drum", 0x65912afefd826745L).type(MetaIdFactory.dataTypeId(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd823b2eL)).origin("7318678144117008197").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPattern() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Pattern", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca62L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968034");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPosition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Position", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca6dL);
    b.class_(false, false, false);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968045");
    b.version(2);
    b.property("division", 0x65912afefd8cecf4L).type(PrimitiveTypeId.STRING).origin("7318678144117697780").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSection() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Section", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca5dL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968029");
    b.version(2);
    b.aggregate("bar", 0x65912afefd823b3bL).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca60L).optional(false).ordered(true).multiple(true).origin("7318678144116996923").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSilence() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Silence", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca64L);
    b.class_(false, false, false);
    b.parent(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968036");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSong() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Song", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd815cddL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116939997");
    b.version(2);
    b.aggregate("track", 0x65912afefd81ca8aL).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca5aL).optional(false).ordered(true).multiple(true).origin("7318678144116968074").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStandarNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "StandarNote", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca6aL);
    b.class_(false, false, false);
    b.parent(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968042");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTempo() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Tempo", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca6eL);
    b.class_(false, false, false);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968046");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTrack() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Track", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca5aL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968026");
    b.version(2);
    b.aggregate("sections", 0x65912afefd823b39L).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca5dL).optional(false).ordered(true).multiple(true).origin("7318678144116996921").done();
    return b.create();
  }
}
