package RythmML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptANote = createDescriptorForANote();
  /*package*/ final ConceptDescriptor myConceptBar = createDescriptorForBar();
  /*package*/ final ConceptDescriptor myConceptBassNote = createDescriptorForBassNote();
  /*package*/ final ConceptDescriptor myConceptDrumNote = createDescriptorForDrumNote();
  /*package*/ final ConceptDescriptor myConceptNoteFrequency = createDescriptorForNoteFrequency();
  /*package*/ final ConceptDescriptor myConceptPosition = createDescriptorForPosition();
  /*package*/ final ConceptDescriptor myConceptRepetition = createDescriptorForRepetition();
  /*package*/ final ConceptDescriptor myConceptSection = createDescriptorForSection();
  /*package*/ final ConceptDescriptor myConceptSilence = createDescriptorForSilence();
  /*package*/ final ConceptDescriptor myConceptSong = createDescriptorForSong();
  /*package*/ final ConceptDescriptor myConceptStandarNote = createDescriptorForStandarNote();
  /*package*/ final ConceptDescriptor myConceptTrack = createDescriptorForTrack();
  /*package*/ final ConceptDescriptor myConceptsequence = createDescriptorForsequence();
  /*package*/ final EnumerationDescriptor myEnumerationDrumEnum = new EnumerationDescriptor_DrumEnum();
  /*package*/ final EnumerationDescriptor myEnumerationNoteEnum = new EnumerationDescriptor_NoteEnum();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptANote, myConceptBar, myConceptBassNote, myConceptDrumNote, myConceptNoteFrequency, myConceptPosition, myConceptRepetition, myConceptSection, myConceptSilence, myConceptSong, myConceptStandarNote, myConceptTrack, myConceptsequence);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.ANote:
        return myConceptANote;
      case LanguageConceptSwitch.Bar:
        return myConceptBar;
      case LanguageConceptSwitch.BassNote:
        return myConceptBassNote;
      case LanguageConceptSwitch.DrumNote:
        return myConceptDrumNote;
      case LanguageConceptSwitch.NoteFrequency:
        return myConceptNoteFrequency;
      case LanguageConceptSwitch.Position:
        return myConceptPosition;
      case LanguageConceptSwitch.Repetition:
        return myConceptRepetition;
      case LanguageConceptSwitch.Section:
        return myConceptSection;
      case LanguageConceptSwitch.Silence:
        return myConceptSilence;
      case LanguageConceptSwitch.Song:
        return myConceptSong;
      case LanguageConceptSwitch.StandarNote:
        return myConceptStandarNote;
      case LanguageConceptSwitch.Track:
        return myConceptTrack;
      case LanguageConceptSwitch.sequence:
        return myConceptsequence;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationDrumEnum, myEnumerationNoteEnum);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForANote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "ANote", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L);
    b.interface_();
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968035");
    b.version(2);
    b.aggregate("position", 0x65912afefd827d76L).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca6dL).optional(false).ordered(true).multiple(false).origin("7318678144117013878").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBar() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Bar", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca60L);
    b.class_(false, false, false);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968032");
    b.version(2);
    b.aggregate("notes", 0x65912afefd825135L).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L).optional(false).ordered(true).multiple(true).origin("7318678144117002549").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBassNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "BassNote", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x1410bedeef2b1835L);
    b.class_(false, false, false);
    b.super_("RythmML.structure.StandarNote", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca6aL);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/1445865345090525237");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDrumNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "DrumNote", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca67L);
    b.class_(false, false, false);
    b.parent(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968039");
    b.version(2);
    b.property("drum", 0x65912afefd826745L).type(MetaIdFactory.dataTypeId(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd823b2eL)).origin("7318678144117008197").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNoteFrequency() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "NoteFrequency", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x52bcad3e71e6e67aL);
    b.class_(false, false, false);
    b.parent(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/5961830490442229370");
    b.version(2);
    b.property("frequency", 0x52bcad3e71e6e67fL).type(MetaIdFactory.dataTypeId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10324579ea7L)).origin("5961830490442229375").done();
    b.aggregate("note", 0x52bcad3e71e6e67dL).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L).optional(false).ordered(true).multiple(false).origin("5961830490442229373").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPosition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Position", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca6dL);
    b.class_(false, false, false);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968045");
    b.version(2);
    b.property("division", 0x65912afefd8cecf4L).type(MetaIdFactory.dataTypeId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10324579ea7L)).origin("7318678144117697780").done();
    b.property("beat", 0x52bcad3e71e6e5ebL).type(MetaIdFactory.dataTypeId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10324579ea7L)).origin("5961830490442229227").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRepetition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Repetition", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x52bcad3e71e6e537L);
    b.class_(false, false, false);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/5961830490442229047");
    b.version(2);
    b.property("repetition", 0x52bcad3e71e6e53eL).type(PrimitiveTypeId.INTEGER).origin("5961830490442229054").done();
    b.aggregate("bars", 0x52bcad3e71e6e538L).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca60L).optional(false).ordered(true).multiple(true).origin("5961830490442229048").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSection() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Section", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca5dL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968029");
    b.version(2);
    b.aggregate("repetitions", 0x65912afefd823b3bL).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x52bcad3e71e6e537L).optional(false).ordered(true).multiple(true).origin("7318678144116996923").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSilence() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Silence", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca64L);
    b.class_(false, false, false);
    b.parent(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968036");
    b.version(2);
    b.property("duration", 0x1410bedeef2b16c4L).type(MetaIdFactory.dataTypeId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10324579ea7L)).origin("1445865345090524868").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSong() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Song", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd815cddL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x4caf0310491e41f5L, 0x8a9b2006b3a94898L, 0x40c1a7cb987d20d5L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116939997");
    b.version(2);
    b.property("tempo", 0x52bcad3e71e6e5e6L).type(PrimitiveTypeId.INTEGER).origin("5961830490442229222").done();
    b.property("musical_div", 0x52bcad3e71e6e5e8L).type(PrimitiveTypeId.INTEGER).origin("5961830490442229224").done();
    b.aggregate("track", 0x65912afefd81ca8aL).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca5aL).optional(false).ordered(true).multiple(true).origin("7318678144116968074").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStandarNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "StandarNote", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca6aL);
    b.class_(false, false, false);
    b.parent(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca63L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968042");
    b.version(2);
    b.property("duration", 0x1410bedeef29e000L).type(MetaIdFactory.dataTypeId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10324579ea7L)).origin("1445865345090445312").done();
    b.property("note", 0x1410bedeef2b1832L).type(MetaIdFactory.dataTypeId(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x1410bedeef2b16c6L)).origin("1445865345090525234").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTrack() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "Track", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca5aL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/7318678144116968026");
    b.version(2);
    b.property("instrument", 0x52bcad3e71e6e5eeL).type(PrimitiveTypeId.STRING).origin("5961830490442229230").done();
    b.aggregate("sections", 0x65912afefd823b39L).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca5dL).optional(false).ordered(true).multiple(true).origin("7318678144116996921").done();
    b.aggregate("sequence", 0x2f82fbf5d7b2453bL).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x2f82fbf5d7b244ecL).optional(false).ordered(true).multiple(true).origin("3423575700059342139").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForsequence() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("RythmML", "sequence", 0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x2f82fbf5d7b244ecL);
    b.class_(false, false, false);
    b.origin("r:916f00b6-5fe2-4b5f-89a4-4c707c5c502b(RythmML.structure)/3423575700059342060");
    b.version(2);
    b.associate("section", 0x2f82fbf5d7b244edL).target(0xf1ebcfd5fd1b4a1dL, 0xa2ad03091ad47f30L, 0x65912afefd81ca5dL).optional(false).origin("3423575700059342061").done();
    return b.create();
  }
}
