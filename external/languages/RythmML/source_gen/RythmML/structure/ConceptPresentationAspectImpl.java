package RythmML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ANote;
  private ConceptPresentation props_Bar;
  private ConceptPresentation props_DrumNote;
  private ConceptPresentation props_NoteFrequency;
  private ConceptPresentation props_Position;
  private ConceptPresentation props_Repetition;
  private ConceptPresentation props_Section;
  private ConceptPresentation props_Silence;
  private ConceptPresentation props_Song;
  private ConceptPresentation props_StandarNote;
  private ConceptPresentation props_Track;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ANote:
        if (props_ANote == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ANote = cpb.create();
        }
        return props_ANote;
      case LanguageConceptSwitch.Bar:
        if (props_Bar == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Bar");
          props_Bar = cpb.create();
        }
        return props_Bar;
      case LanguageConceptSwitch.DrumNote:
        if (props_DrumNote == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DrumNote");
          props_DrumNote = cpb.create();
        }
        return props_DrumNote;
      case LanguageConceptSwitch.NoteFrequency:
        if (props_NoteFrequency == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NoteFrequency");
          props_NoteFrequency = cpb.create();
        }
        return props_NoteFrequency;
      case LanguageConceptSwitch.Position:
        if (props_Position == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Position");
          props_Position = cpb.create();
        }
        return props_Position;
      case LanguageConceptSwitch.Repetition:
        if (props_Repetition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Repetition");
          props_Repetition = cpb.create();
        }
        return props_Repetition;
      case LanguageConceptSwitch.Section:
        if (props_Section == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Section = cpb.create();
        }
        return props_Section;
      case LanguageConceptSwitch.Silence:
        if (props_Silence == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Silence");
          props_Silence = cpb.create();
        }
        return props_Silence;
      case LanguageConceptSwitch.Song:
        if (props_Song == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Song = cpb.create();
        }
        return props_Song;
      case LanguageConceptSwitch.StandarNote:
        if (props_StandarNote == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("StandarNote");
          props_StandarNote = cpb.create();
        }
        return props_StandarNote;
      case LanguageConceptSwitch.Track:
        if (props_Track == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Track = cpb.create();
        }
        return props_Track;
    }
    return null;
  }
}
